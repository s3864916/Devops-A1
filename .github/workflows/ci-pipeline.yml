name: Notes Application CI Pipeline


on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    branches:
      - main

jobs:
  lint-tests:
    runs-on: ubuntu-latest
    steps:        
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "17.6.0"
      - name: Install dependencies
        run: npm clean-install --prefix src
      - name: Run linter
        run: npm run test-lint --prefix src
      - name: Break on failure 
        if: failure()
        run: |
          echo "Lint tests failed, break the pipline now."
          exit 1
  
  unit-tests:
    needs: lint-tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "17.6.0"
    - name: Install dependencies
      run: npm clean-install --prefix src
    - name: Run unit tests
      run: npm run test-unit --prefix src
    - name: Break on failure 
      if: failure()
      run: |
        echo "Unit-tests tests failed, break the pipline now."
        exit 1
    - name: Unit-test artifact upload
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-${{ github.sha }}
        path: src/reports/report.xml
    - name: Coverage check artifact upload
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-coverage-${{ github.sha }}
        path: src/coverage/coverage-final.json

  integration-tests:
    needs: [lint-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "17.6.0"
    - name: Install dependencies
      run: npm clean-install --prefix src
    - name: Run database
      run: docker-compose up -d
    - name: Run integration test
      run: npm run test-integration --prefix src
    - name: Break and log on failure 
      if: failure()
      run: |
        echo "Integration tests failed, see log below:"
        npm run test-integration --prefix src > cat
        exit 1
    - name: Clean database
      run: docker-compose down
    - name: Integration test artifact upload
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-${{ github.sha }}
        path: src/reports/report.xml
    - name: Coverage check artifact upload
      uses: actions/upload-artifact@v3
      with:
        name: integration-coverage-${{ github.sha }}
        path: src/coverage/coverage-final.json

  e2e-tests:
    needs: [lint-tests, unit-tests, integration-tests]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "17.6.0"
    - name: Install dependencies
      run: npm clean-install --prefix src
    - name: Install Playwright Browsers
      run: npm run install-e2e --prefix src
    - name: Run database
      run: docker-compose up -d
    - name: Run app
      run: npm run start-background --prefix src
    - name: Run Playwright tests
      run: npm run test-e2e --prefix src
    - name: Break and log on failure 
      if: failure()
      run: |
        echo "E2e tests failed, see log below:"
        npm run test-e2e --prefix src
        exit 1
    - name: Clean app
      run: npm run clean-background --prefix src
    - name: Clean database
      run: docker-compose down
    - name: E2E artifact upload
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report-${{ github.sha }}
        path: src/playwright-report/index.html

  deploy:
    needs: [lint-tests, unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "17.6.0"
    - name: Install dependencies
      run: npm clean-install --prefix src
    - name: Build deploy file
      run: npm run build --prefix src
    - name: Deploy artifact upload in condition # Only when success or push to main(which not gonna happen generally)
      if: (success() && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.base_ref == 'main')
      uses: actions/upload-artifact@v3
      with:
        name: deploy-${{ github.sha }}
        path: src/notes-1.0.0.tgz
